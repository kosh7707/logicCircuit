// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2024 18:37:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          number_comparator_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module number_comparator_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A0;
reg [3:0] A1;
reg [3:0] A2;
reg [3:0] A3;
// wires                                               
wire Dout;

// assign statements (if any)                          
number_comparator_test i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.Dout(Dout)
);
initial 
begin 
#1000000 $finish;
end 
// A0[ 3 ]
initial
begin
	A0[3] = 1'b0;
end 
// A0[ 2 ]
initial
begin
	A0[2] = 1'b0;
	A0[2] = #10000 1'b1;
	A0[2] = #20000 1'b0;
end 
// A0[ 1 ]
initial
begin
	A0[1] = 1'b0;
end 
// A0[ 0 ]
initial
begin
	A0[0] = 1'b0;
end 
// A1[ 3 ]
initial
begin
	A1[3] = 1'b0;
end 
// A1[ 2 ]
initial
begin
	A1[2] = 1'b0;
	A1[2] = #10000 1'b1;
	A1[2] = #20000 1'b0;
end 
// A1[ 1 ]
initial
begin
	A1[1] = 1'b0;
end 
// A1[ 0 ]
initial
begin
	A1[0] = 1'b0;
end 
// A2[ 3 ]
initial
begin
	A2[3] = 1'b0;
end 
// A2[ 2 ]
initial
begin
	A2[2] = 1'b0;
end 
// A2[ 1 ]
initial
begin
	A2[1] = 1'b0;
end 
// A2[ 0 ]
initial
begin
	A2[0] = 1'b0;
end 
// A3[ 3 ]
initial
begin
	A3[3] = 1'b0;
	A3[3] = #10000 1'b1;
	A3[3] = #20000 1'b0;
end 
// A3[ 2 ]
initial
begin
	A3[2] = 1'b0;
end 
// A3[ 1 ]
initial
begin
	A3[1] = 1'b0;
end 
// A3[ 0 ]
initial
begin
	A3[0] = 1'b0;
	A3[0] = #10000 1'b1;
	A3[0] = #20000 1'b0;
end 
endmodule

